(window.webpackJsonp=window.webpackJsonp||[]).push([[17],{378:function(v,_,e){"use strict";e.r(_);var l=e(44),t=Object(l.a)({},(function(){var v=this,_=v.$createElement,e=v._self._c||_;return e("ContentSlotsDistributor",{attrs:{"slot-key":v.$parent.slotKey}},[e("h2",{attrs:{id:"工作流程"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#工作流程"}},[v._v("#")]),v._v(" 工作流程")]),v._v(" "),e("ol",[e("li",[v._v("初始化参数：从配置文件和 Shell 语句中读取并合并参数,得出最终的配置对象")]),v._v(" "),e("li",[v._v("用上一步得到的参数初始化 "),e("code",[v._v("Compiler")]),v._v(" 对象")]),v._v(" "),e("li",[v._v("加载所有配置的插件，传入 "),e("code",[v._v("compiler")]),v._v(" 实例")]),v._v(" "),e("li",[v._v("执行 "),e("code",[v._v("compiler")]),v._v(" 对象的 "),e("code",[v._v("run")]),v._v(" 方法，开始编译")]),v._v(" "),e("li",[v._v("根据配置中的 entry 找出入口文件")]),v._v(" "),e("li",[v._v("从入口文件出发,调用所有配置的 Loader 对模块进行编译")]),v._v(" "),e("li",[v._v("再找出该模块依赖的模块，再递归本步骤直到所有入口依赖的文件都经过了本步骤的处理")]),v._v(" "),e("li",[v._v("根据入口和模块之间的依赖关系，组装成一个个包含多个模块的 Chunk")]),v._v(" "),e("li",[v._v("再把每个 Chunk 转换成一个单独的文件加入到输出列表")]),v._v(" "),e("li",[v._v("在确定好输出内容后，根据配置确定输出的路径和文件名，把文件内容写入到文件系统")])])])}),[],!1,null,null,null);_.default=t.exports}}]);